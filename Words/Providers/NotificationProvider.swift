//
//  NotificationsController.swift
//  TestLanguageApp
//
//  Created by –ò–≤–∞–Ω –õ—å–≤–æ–≤ on 26.07.2022.
//

import SwiftUI
import UserNotifications

struct NotifyObject {
    var id: Int
    var title: String
    var text: String
}

class NotificationProvider {
    // MARK: - PROPERTIES

    @AppStorage("isDailyWordNotificationSet") private var isDailyWordNotificationSet: Bool = false

    // static let shared = NotificationProvider()
    let center = UNUserNotificationCenter.current()

    private let headlines: [String] = [
        "üòé –î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º!",
        "ü§ò –ì–æ—Ç–æ–≤—ã?",
        "ü§® –î–∞–≤–∞–π –æ—Ç–≥–∞–¥–∞–µ–º!",
        "üôÉ –°–¥–µ–ª–∞–µ–º —ç—Ç–æ!",
        "üñêÔ∏è –ü—Ä–∏–≤–µ—Ç!",
        "üòè –ï—â–µ –ø–æ–ø—ã—Ç–∫–∞!",
        "üòë –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∂–¥–∞—Ç—å!",
        "ü´° –ù–µ –º–æ–∂–µ–º –∂–¥–∞—Ç—å!",
        "üòè –ï—â–µ –∫–æ–µ-—á—Ç–æ",
        "üëã –û—Ç–¥–æ—Ö–Ω—É–ª–∏?",
        "üìå –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏!",
        "üëã –ö–∞–∫ –í—ã?",
        "üë£ –ó–∞—Ö–æ–¥–∏!",
        "üôà –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!",
        "ü¶ä –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—å—è—Å–Ω—è—Ç—å!",
        "üòó –ù–∞–º –Ω—É–∂–Ω–æ –µ—â–µ –ø–∞—Ä–æ—á–∫—É —Å–ª–æ–≤",
        "üò≤ –ù–µ–ª—å–∑—è –∂–¥–∞—Ç—å",
        "üòè –ü—Ä–∏–≤–µ—Ç –ü—Ä–∏–≤–µ—Ç!",
        "üíé Hola!",
        "‚è∞ –í—Ä–µ–º—è –ø–æ–±–µ–∂–¥–∞—Ç—å!",
        "üôÉ –°—ã–≥—Ä–∞–µ–º?",
        "üìï –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –≠–¢–û —Å–ª–æ–≤–æ",
        "üëÄ –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º",
        "üëã Saludos!",
        "üëª –¢—ã –∑–¥–µ—Å—å?",
        "üëã How are you doing?",
        "üò≤ –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è"
    ]

    private let bodies: [String] = [
        "–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ",
        "–°–ª–æ–≤–æ –¥–Ω—è —É–∂–µ –ø–æ—è–≤–∏–ª–æ—Å—å",
        "–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Ç–µ–±—è",
        "–°–ª–æ–≤–æ –¥–Ω—è —É–∂–µ —É –Ω–∞—Å –≤ —Ä—É–∫–∞—Ö. –ó–∞—Ö–æ–¥–∏–º!",
        "–ú–æ–∂–Ω–æ —Ä–∞–∑–≥–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è!",
        "–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è"
    ]

    // MARK: - ARRAY OF RANDOM NOTIIFICATIONS
    private var notifications: [NotifyObject] {
        var notifications: [NotifyObject] = []
        for index in 1...60 {
            let title = self.headlines.randomElement() ?? self.headlines[0]
            let body = self.bodies.randomElement() ?? self.bodies[0]
            notifications.append(NotifyObject(id: index + 1, title: body, text: title))
        }
        return notifications
    }

    // MARK: - FUNCTIONS

    // Prints current planned notifications
    func showCurrent() {
        center.getPendingNotificationRequests(completionHandler: { requests in
            for request in requests {
                print(request)
            }
        })
    }

    func toggleNotifications() {
        if isDailyWordNotificationSet {
            removeAllNotifications()
        } else {
            setNotifications()
        }
    }

    // –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    func removeAllNotifications() {
        print("–£–¥–∞–ª—è—é")
        isDailyWordNotificationSet = false
        center.removeAllDeliveredNotifications()
        center.removeAllPendingNotificationRequests()
    }

    // –£–¥–∞–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    func removeTodaysNotification() {
        let notificationCenter = UNUserNotificationCenter.current()

        notificationCenter.getPendingNotificationRequests(completionHandler: { requests in
            for request in requests {
                if let trigger = request.trigger as? UNCalendarNotificationTrigger,
                   let nextTriggerDate = trigger.nextTriggerDate() {
                    if Calendar.current.isDateInToday(nextTriggerDate) {
                        notificationCenter.removeDeliveredNotifications(withIdentifiers: [request.identifier])
                        notificationCenter.removePendingNotificationRequests(withIdentifiers: [request.identifier])
                    }
                }
            }
        })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    func checkAndSetNotifiications( skipCurrentDay: Bool = false ) {
        center.getPendingNotificationRequests(completionHandler: { requests in
            if requests.count < 5 {
                self.updateNotifications(skipCurrentDay: skipCurrentDay)
            }
        })
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    func updateNotifications(skipCurrentDay: Bool = false) {
        // Set notifications only if we have access
        center.getNotificationSettings { (settings) in
            if settings.authorizationStatus == .authorized {
                self.removeAllNotifications()
                print("<NOTIFICATIONS> We have access, set up notifications")
                // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–∞—à–∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self.notifications.enumerated().forEach {(index, notifyObject) in

                    if skipCurrentDay && index == 0 {
                        return
                    }

                    // Create the new notfication
                    let notificationContent = UNMutableNotificationContent()
                    notificationContent.title = notifyObject.title
                    notificationContent.body = notifyObject.text
                    notificationContent.badge = NSNumber(value: 1)
                    notificationContent.sound = .default

                    // –î–æ–±–∞–≤–∏–ª–∏ N –¥–Ω–µ–π –∫ –¥–∞—Ç–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                    let nextTriggerDate = Calendar.current.date(
                        byAdding: .day,
                        value: index,
                        to: Date()
                    )!

                    // –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º–∏–Ω—É—Ç—ã –∏ —á–∞—Å—ã –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    var components = Calendar.current.dateComponents([.day, .minute, .hour, .month], from: nextTriggerDate)
                    components.minute = 0
                    components.hour = 14

                    // –°–æ–∑–¥–∞–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä
                    let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)

                    // –°–æ–∑–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å
                    let request = UNNotificationRequest(identifier: "\(notifyObject.id)", content: notificationContent, trigger: trigger)

                    // –î–æ–±–∞–≤–∏–ª–∏
                    UNUserNotificationCenter.current().add(request) { (error: Error?) in
                        if let theError = error {
                            print(theError.localizedDescription)
                        } else {
                            self.isDailyWordNotificationSet = true
                        }
                    }
                }
            }
        }

    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    func setNotifications() {
        center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, _ in
            if granted {
                self.updateNotifications()
            } else {
                print("Don't have an access... EXIT")
            }
        }
    }
}
